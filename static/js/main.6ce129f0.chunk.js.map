{"version":3,"sources":["client/weatherIcon.js","client/weatherText.js","App.js","serviceWorker.js","index.js"],"names":["WeatherIcon","props","weatherData","weatherId","weather","id","useState","weatherIcon","setWeatherIcon","useEffect","className","direction","style","textAlign","marginTop","main","href","target","WeatherText","temperatureAdditiveText","setTemperatureAdditiveText","placeName","name","sys","country","weatherDescription","description","charAt","toUpperCase","slice","precision","x","Number","parseFloat","toPrecision","celsiusTemperature","temp","fahrenheitTemperature","currentTemperature","setCurrentTemperature","celsiusFeelsTemperature","feels_like","fahrenheitFeelsTemperature","feelsLikeTemperature","setFeelsLikeTemperature","text","type","onClick","e","preventDefault","App","latitude","setLatitude","longitude","setLongitude","setWeatherData","loading","setLoading","url","storeLocationFail","error","console","log","storeLocation","position","a","coords","navigator","geolocation","getCurrentPosition","getWeatherData","then","result","fetch","response","json","unloadedWeatherApp","loadedWeatherApp","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"gOAuFeA,MAnFf,SAAqBC,GAAQ,IACjBC,EAAgBD,EAAhBC,YACFC,EAAYD,EAAYE,QAAQ,GAAGC,GAFjB,EAGcC,mBAAS,yCAHvB,mBAGlBC,EAHkB,KAGLC,EAHK,KAwExB,OAFAC,qBAjEqB,WAEbD,EADAL,GAAa,KAAOA,EAAY,IAE5B,yBAAKO,UAAU,sBACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,SACf,yBAAKA,UAAU,WAInBP,GAAa,KAAOA,EAAY,IAEpC,yBAAKO,UAAU,mBACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,UAGfP,GAAa,KAAOA,EAAY,IAEpC,yBAAKO,UAAU,cACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,UAGfP,GAAa,KAAOA,EAAY,IAEpC,yBAAKO,UAAU,iBACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,QACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,YAInBP,GAAa,KAAOA,EAAY,IAEpC,yBAAKO,UAAU,eACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,WAGD,MAAdP,EAEJ,yBAAKO,UAAU,cACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,WAInBP,EAAY,IAEhB,yBAAKO,UAAU,eACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,WAIR,kDAIC,CAACP,IAGrB,6BACI,kBAAC,IAAD,CAAOQ,UAAU,YACZJ,EACD,wBAAIK,MAAO,CAACC,UAAW,SAAUC,UAAW,QAASZ,EAAYE,QAAQ,GAAGW,MAC5E,+CAAoB,uBAAGC,KAAK,4CAA4CC,OAAO,UAA3D,kBCxBrBC,MArDf,SAAqBjB,GAAQ,IACjBC,EAAgBD,EAAhBC,YADgB,EAEsCI,mBAAS,SAF/C,mBAEjBa,EAFiB,KAEQC,EAFR,KAGpBC,EAAYnB,EAAYoB,KAAO,KAAOpB,EAAYqB,IAAIC,QAEtDC,EAAqBvB,EAAYE,QAAQ,GAAGsB,YAChDD,EAAqBA,EAAmBE,OAAO,GAAGC,cAAgBH,EAAmBI,MAAM,GAE3F,IAAMC,EAAY,SAACC,GACf,OAAOC,OAAOC,WAAWF,GAAGG,YAAY,IAGtCC,EAAqBL,EAAU5B,EAAYa,KAAKqB,KAAO,QACvDC,EAAwBP,EAA+B,EAArBK,EAAyB,EAAM,IAb/C,EAc4B7B,mBAAS6B,GAdrC,mBAcjBG,EAdiB,KAcGC,EAdH,KAgBlBC,EAA0BV,EAAU5B,EAAYa,KAAK0B,WAAa,QAClEC,EAA6BZ,EAAoC,EAA1BU,EAA8B,EAAM,IAjBzD,EAkBgClC,mBAASkC,GAlBzC,mBAkBjBG,EAlBiB,KAkBKC,EAlBL,KAkClBC,EACE,6BACI,sCAAYxB,GACZ,qDAA2BiB,EAA3B,IAAgDnB,GAChD,4CAAkBwB,EAAlB,IAAyCxB,EAAzC,KACA,kBAAC,IAAD,CAAOR,UAAU,cACb,kBAAC,IAAD,CAAQmC,KAAK,UAAUC,QApBrB,SAACC,GACfA,EAAEC,iBACFV,EAAsBJ,GACtBS,EAAwBJ,GACxBpB,EAA2B,WAgBf,aACA,kBAAC,IAAD,CAAQ0B,KAAK,UAAUC,QAdlB,SAACC,GAClBA,EAAEC,iBACFV,EAAsBF,GACtBO,EAAwBF,GACxBtB,EAA2B,WAUf,iBAEJ,kEAAqCK,EAArC,MAGZ,OACI,6BACKoB,I,cCkBEK,MA9Df,WAAgB,IAAD,EACuB5C,mBAAS,GADhC,mBACH6C,EADG,KACOC,EADP,OAEyB9C,mBAAS,GAFlC,mBAEH+C,EAFG,KAEQC,EAFR,OAG4BhD,mBAAS,IAHrC,mBAGHJ,EAHG,KAGUqD,EAHV,OAImBjD,oBAAS,GAJ5B,mBAIJkD,EAJI,KAIKC,EAJL,KAMLC,EAAI,uDAAD,OAAyDP,EAAzD,gBAAyEE,EAAzE,2CAEHM,EAAoB,SAACC,GACvBC,QAAQC,IAAI,mDAGVC,EAAa,uCAAI,WAAOC,GAAP,SAAAC,EAAA,sDACnBb,EAAaY,EAASE,OAAOf,UAC7BG,EAAaU,EAASE,OAAOb,WAFV,2CAAJ,sDAKnB5C,qBAAW,WACPgD,GAAW,GACXU,UAAUC,YAAYC,mBAAmBN,EAAeJ,GACxDW,EAfe,sGAeYC,MAAK,SAAAC,GAC5BjB,EAAeiB,GACff,GAAW,QAEhB,IAEH,IAUMa,EAAc,uCAAG,WAAOZ,GAAP,eAAAO,EAAA,sEACIQ,MAAMf,GADV,cACbgB,EADa,gBAENA,EAASC,OAFH,mFAAH,sDAKdC,EAAqB,yCAErBC,EACF,6BACI,6CACA,kBAAC,IAAD,CAAOlE,UAAU,YACb,kBAAC,EAAD,CAAaT,YAAaA,EAAa4E,IAAK,IAC5C,kBAAC,IAAD,CAAQhC,KAAK,UAAUC,QAtBnB,SAASC,GACrBA,EAAEC,iBACFQ,GAAW,GACXU,UAAUC,YAAYC,mBAAmBN,EAAeJ,GACxDW,EAAeZ,GAAKa,MAAK,SAAAC,GACpBjB,EAAeiB,GACff,GAAW,OAgBiC/C,UAAU,UAAnD,oCACA,kBAAC,EAAD,CAAaR,YAAaA,MAKtC,OAAgB,IAAZsD,EACQoB,EAEAC,GCrDIE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACDC,SAASC,eAAe,SD2HrB,kBAAmBpB,WACrBA,UAAUqB,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLC,QAAQD,MAAMA,EAAMiC,a","file":"static/js/main.6ce129f0.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { Space} from 'antd';\nimport '../App.css';\n\nfunction WeatherIcon(props) {\n    const { weatherData } = props;\n    const weatherId = weatherData.weather[0].id;\n    const[weatherIcon, setWeatherIcon ] = useState(<div>Initial</div>);\n\n    const weatherCodes = () => {\n        if (weatherId >= 200 && weatherId < 300){\n            setWeatherIcon(\n                <div className=\"icon thunder-storm\">\n                    <div className=\"cloud\"/>\n                    <div className=\"lightning\">\n                        <div className=\"bolt\"/>\n                        <div className=\"bolt\"/>\n                    </div>\n                </div>\n            );\n        } else if ( weatherId >= 300 && weatherId < 500) {\n            setWeatherIcon(\n                <div className=\"icon sun-shower\">\n                    <div className=\"cloud\"/>\n                    <div className=\"sun\">\n                        <div className=\"rays\"/>\n                    </div>\n                    <div className=\"rain\"/>\n                </div>\n            );\n        } else if ( weatherId >= 500 && weatherId < 600) {\n            setWeatherIcon(\n                <div className=\"icon rainy\">\n                    <div className=\"cloud\"/>\n                    <div className=\"rain\"/>\n                </div>\n            );\n        } else if ( weatherId >= 600 && weatherId < 700) {\n            setWeatherIcon(\n                <div className=\"icon flurries\">\n                    <div className=\"cloud\" />\n                    <div className=\"snow\">\n                        <div className=\"flake\"/>\n                        <div className=\"flake\"/>\n                    </div>\n                </div>\n            );\n        } else if ( weatherId >= 700 && weatherId < 800) {\n            setWeatherIcon(\n                <div className=\"icon cloudy\">\n                    <div className=\"cloud\"/>\n                    <div className=\"cloud\"/>\n                </div>\n            );\n        } else if ( weatherId === 800) {\n            setWeatherIcon(\n                <div className=\"icon sunny\">\n                    <div className=\"sun\">\n                        <div className=\"rays\"/>\n                    </div>\n                </div>\n            );\n        } else if ( weatherId > 800) {\n            setWeatherIcon(\n                <div className=\"icon cloudy\">\n                    <div className=\"cloud\"/>\n                    <div className=\"cloud\"/>\n                </div>\n            );\n        } else {\n            setWeatherIcon(<div>Error Occurred</div>);\n        }\n    }\n\n    useEffect(weatherCodes, [weatherId]);\n\n    return (\n        <div>\n            <Space direction=\"vertical\">\n                {weatherIcon}\n                <h2 style={{textAlign: 'center', marginTop: '0px'}}>{weatherData.weather[0].main}</h2>\n                <p>Icons Taken from <a href=\"https://codepen.io/joshbader/full/EjXgqr/\" target=\"_blank\">Josh Bader</a></p>\n            </Space>\n        </div>\n    );\n}\n\nexport default WeatherIcon;","import React, {useState} from 'react';\nimport { Space, Button } from 'antd';\nimport '../App.css';\n\nfunction WeatherText(props) {\n    const { weatherData } = props;\n    const [temperatureAdditiveText, setTemperatureAdditiveText] = useState('\\u00B0' + 'C');\n    let placeName = weatherData.name + ', ' + weatherData.sys.country;\n\n    let weatherDescription = weatherData.weather[0].description;\n    weatherDescription = weatherDescription.charAt(0).toUpperCase() + weatherDescription.slice(1);\n\n    const precision = (x) => {\n        return Number.parseFloat(x).toPrecision(3);\n    }\n\n    const celsiusTemperature = precision(weatherData.main.temp - 273.15);\n    const fahrenheitTemperature = precision(celsiusTemperature * 9.0/5.0 + 32);\n    const [currentTemperature, setCurrentTemperature] = useState(celsiusTemperature);\n\n    const celsiusFeelsTemperature = precision(weatherData.main.feels_like - 273.15);\n    const fahrenheitFeelsTemperature = precision(celsiusFeelsTemperature * 9.0/5.0 + 32);\n    const [feelsLikeTemperature, setFeelsLikeTemperature] = useState(celsiusFeelsTemperature);\n\n    const toCelsius = (e) => {\n        e.preventDefault();\n        setCurrentTemperature(celsiusTemperature);\n        setFeelsLikeTemperature(celsiusFeelsTemperature);\n        setTemperatureAdditiveText('\\u00B0' + 'C');\n    }\n\n    const toFahrenheit = (e) => {\n        e.preventDefault();\n        setCurrentTemperature(fahrenheitTemperature);\n        setFeelsLikeTemperature(fahrenheitFeelsTemperature);\n        setTemperatureAdditiveText('\\u00B0' + 'F');\n    }\n\n    const text = (\n            <div>\n                <h2> Name: {placeName}</h2>\n                <h2> Current Temperature: {currentTemperature} {temperatureAdditiveText}</h2>\n                <h2> Feels like: {feelsLikeTemperature} {temperatureAdditiveText} </h2>\n                <Space direction=\"horizontal\">\n                    <Button type=\"primary\" onClick={toCelsius} > Celsius </Button>\n                    <Button type=\"primary\" onClick={toFahrenheit}> Fahrenheit </Button>\n                </Space>\n                <h2>How's it looking right now? --> {weatherDescription} </h2>\n            </div>\n    );\n    return (\n        <div>\n            {text}\n        </div>\n    );\n}\n\nexport default WeatherText;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport { Space, Button} from 'antd';\nimport WeatherIcon from \"./client/weatherIcon\";\nimport WeatherText from \"./client/weatherText\";\nimport { Typography } from 'antd';\nimport CityInput from \"./client/cityInput\";\n\nfunction App() {\n    const [ latitude, setLatitude ] = useState(0);\n    const [ longitude, setLongitude ] = useState(0);\n    const [ weatherData, setWeatherData] = useState({});\n    const [loading, setLoading] = useState(true);\n    const initialUrl = 'https://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=4bd7f3965a24ff9ad9ebd6d42e0194dc';\n    const url= `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=4bd7f3965a24ff9ad9ebd6d42e0194dc`;\n\n    const storeLocationFail = (error) => {\n        console.log(\"An error has occurred in getting the position!\")\n    };\n\n    const storeLocation =  async (position) => {\n        setLatitude( position.coords.latitude);\n        setLongitude(position.coords.longitude);\n    };\n\n    useEffect( () => {\n        setLoading(true);\n        navigator.geolocation.getCurrentPosition(storeLocation, storeLocationFail);\n        getWeatherData(initialUrl).then(result => {\n            setWeatherData(result);\n            setLoading(false);\n        });\n    }, [])\n\n    const onclick = function(e) {\n        e.preventDefault();\n        setLoading(true);\n        navigator.geolocation.getCurrentPosition(storeLocation, storeLocationFail);\n        getWeatherData(url).then(result => {\n             setWeatherData(result);\n             setLoading(false);\n        });\n    };\n\n    const getWeatherData = async (url) => {\n        const response = await fetch(url);\n        return await response.json();\n    };\n\n    const unloadedWeatherApp = <div>unloaded</div>;\n\n    const loadedWeatherApp =\n        <div>\n            <h1> Weather App </h1>\n            <Space direction=\"vertical\">\n                <WeatherText weatherData={weatherData} key={1}/>\n                <Button type=\"primary\" onClick={onclick} className=\"button\">Search for weather where I live!</Button>\n                <WeatherIcon weatherData={weatherData} />\n            </Space>\n        </div>\n    ;\n\n    if (loading === true){\n        return (unloadedWeatherApp);\n    } else {\n        return (loadedWeatherApp);\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}